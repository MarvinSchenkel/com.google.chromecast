{
  "name": "castv2-web",
  "version": "0.0.2",
  "description": "Castv2 client to send web content to a cast receive app",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://marianmoldovan@github.com/marianmoldovan/castv2-web.git"
  },
  "keywords": [
    "cast",
    "chromecast"
  ],
  "author": {
    "name": "Marian C. Moldovan"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/marianmoldovan/castv2-web/issues"
  },
  "homepage": "https://github.com/marianmoldovan/castv2-web#readme",
  "dependencies": {
    "castv2-client": "^1.1.2"
  },
  "gitHead": "9efafd8990a0d2fa651cc6a887cdb438f052d88b",
  "readme": "### castv2-web\nCast sender that sends a url togheter to a refresh rate to be show a web in a cast screen. For now works with the receiver developed by [boombatower](https://github.com/boombatower), that will be [chromecast-dashboard](https://github.com/boombatower/chromecast-dashboard/).\n\n### Sample\n\n```javascript\nvar Client                = require('castv2-client').Client;\nvar Web                   = require('castv2-web').Web;\nvar mdns                  = require('mdns');\n\nvar browser = mdns.createBrowser(mdns.tcp('googlecast'));\n\nbrowser.on('serviceUp', function(service) {\n  console.log('Found device ',service.name, ' at ', service.addresses[0], ':', service.port);\n  ondeviceup(service.addresses[0]);\n  browser.stop();\n});\n\nbrowser.start();\n\nfunction ondeviceup(host) {\n  var client = new Client();\n  client.connect(host, function() {\n    console.log('Connected');\n    client.launch(Web, function(err, manager) {\n      console.log('Dashboard Launched');\n      manager.load('https://www.npmjs.com/package/castv2-web');\n    });\n  });\n}\n\n```\n\nYou can set a refresh rate, so that the receiver will update every X seconds\n`manager.load(url, 10`);\n\n### Limitations\nNote that this receiver has a limitation around the frame-ancestors directive and X-Frame-Options header. So the webpages that don't like being embeded in a ifram won't show.\n\n### Ubuntu/Debian\nDue to incompatibilities of node-mdns with Ubuntu/Debian (issues with Raspberry Pi and Ubuntu 14.04) I recomend using the mdns-js implementation for discovery. The same example it will be:\n\n```javascript\nvar Client                = require('castv2-client').Client;\nvar Web                   = require('castv2-web').Web;\nvar mdns = require('mdns-js');\n\nvar browser = mdns.createBrowser('_googlecast._tcp');\n\nbrowser.on('ready', function () {\n    console.log('ready');\n    browser.discover();\n});\n\nbrowser.on('update', function (data) {\n    ondeviceup(data.addresses[0]);\n    browser.stop();\n});\n\nfunction ondeviceup(host) {\n  var client = new Client();\n  client.connect(host, function() {\n    console.log('Connected');\n    client.launch(Web, function(err, manager) {\n      console.log('Dashboard Launched');\n      manager.load('https://www.npmjs.com/package/castv2-web');\n    });\n  });\n}\n```\n\n\n### Installation\n\n`npm install castv2-web`\n",
  "readmeFilename": "README.md",
  "_id": "castv2-web@0.0.2",
  "_shasum": "47c616686b72bdbd9ff6d6ed89f0eeabd6e77f83",
  "_from": "git+ssh://git@github.com/athombv/castv2-web.git",
  "_resolved": "git+ssh://git@github.com/athombv/castv2-web.git#9efafd8990a0d2fa651cc6a887cdb438f052d88b"
}
