'use strict';

const Application = require('castv2-client').Application;
const YoutubeController = require('./YoutubeController');

const Youtube = class Youtube extends Application {
	constructor(client, session) {
		super(client, session);

		YoutubeController.APP_URN = Youtube.APP_URN;

		this.youtube = this.createController(YoutubeController, session);

		const onStatus = (status) => {
			this.emit('status', status);
		};

		const onYoutubeDisconnect = () => {
			this.emit('disconnect');
			this.emit('close');
		};

		const onDisconnect = () => {
			this.removeListener('close', onClose);
			this.youtube.removeListener('disconnect', onDisconnect);
			this.youtube.removeListener('status', onStatus);
			this.youtube = null;
		};

		const onClose = () => {
			this.removeListener('disconnect', onDisconnect);
			this.youtube.removeListener('disconnect', onYoutubeDisconnect);
			this.youtube.removeListener('status', onStatus);
			this.youtube.close();
			this.youtube = null;
		};

		this.youtube.on('status', onStatus);
		this.youtube.once('disconnect', onYoutubeDisconnect);

		this.once('disconnect', onDisconnect);
		this.once('close', onClose);
	}

	loadVideo(youtubeId, options, callback) {
		this.youtube.loadVideo(youtubeId, options, callback);
	}

	loadPlaylist(youtubePlaylistId, options, callback) {
		this.youtube.loadPlaylist(youtubePlaylistId, options, callback);
	}

	getStatus(callback) {
		this.youtube.getStatus(callback);
	}

	play(callback) {
		this.youtube.play(callback);
	}

	pause(callback) {
		this.youtube.pause(callback);
	}

	previous(callback) {
		this.youtube.previous(callback);
	}

	next(callback) {
		this.youtube.next(callback);
	}

	stop(callback) {
		this.youtube.stop(callback);
	};

	shuffle(shuffle, callback) {
		this.youtube.shuffle(shuffle, callback);
	};

	loop(loop, callback) {
		this.youtube.loop(loop, callback);
	};

	seek(time, callback) {
		this.youtube.seek(time, callback);
	};
};

Youtube.APP_ID = '0514A3CB';
Youtube.APP_URN = 'com.athom.chromecast';

module.exports = Youtube;
